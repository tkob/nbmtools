*[File]: java.io.File
*[FileInputStream]: java.io.FileInputStream
*[Paths]: java.nio.file.Paths
*[ZipInputStream]: java.util.zip.ZipInputStream
*[IOUtils]: org.apache.commons.io.IOUtils
*[FileEntry]: nbmtools.FileEntry
*[TestUtils]: nbmtools.TestUtils
*[NbmInputStream]: nbmtools.NbmInputStream
*[ZipUtils]: nbmtools.ZipUtils

# Test: Replace external

## Setup: create a source zip file with .external entry

Let fromFile = `File.createTempFile("NbmInputStreamTest-from", ".zip")`.

Let url= `getClass().getResource("/nbmtools/text1.txt")`.

Let content = `"URL:" + url`.

Let fileName = `Paths.get(url.toURI()).fileName.toString()`.

Let zipEntry = `new FileEntry(fileName + ".external", content as byte[])`.

Do `TestUtils.createZipFile(fromFile, [zipEntry])`.

Do `fromFile.deleteOnExit()`.

# Verify

Assert `ZipUtils.fold(collect, [], new NbmInputStream(fromFile))` is
 `["content of text1"]`
where collect =
 `{ c, cs -> cs.add(IOUtils.toString(c.inputStream, "UTF-8")); cs }`.

# Test: Replace external (two entries)

## Setup: create a source zip file with .external entry

Let fromFile = `File.createTempFile("NbmInputStreamTest-from", ".zip")`.

Let url= `getClass().getResource("/nbmtools/text1.txt")`.

Let content = `"URL:" + url`.

Let fileName = `Paths.get(url.toURI()).fileName.toString()`.

Let zipEntry1 = `new FileEntry(fileName + "1.external", content as byte[])`
and zipEntry2 = `new FileEntry(fileName + "2.external", content as byte[])`.

Do `TestUtils.createZipFile(fromFile, [zipEntry1, zipEntry2])`.

Do `fromFile.deleteOnExit()`.

# Verify

Assert `ZipUtils.fold(collect, [], new NbmInputStream(fromFile))` is
 `["content of text1", "content of text1"]`
where collect =
 `{ c, cs -> cs.add(IOUtils.toString(c.inputStream, "UTF-8")); cs }`.
