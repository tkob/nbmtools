*[File]: java.io.File
*[ZipFile]: java.util.zip.ZipFile
*[ZipInputStream]: java.util.zip.ZipInputStream
*[ZipOutputStream]: java.util.zip.ZipOutputStream
*[NbmUtils]: nbmtools.NbmUtils
*[ZipUtils]: nbmtools.ZipUtils

# Test: identity mapToFile

## Setup

Let url = `getClass().getResource("/nbmtools/zip1.zip")`.

Let fromFile = `new File(url.toURI())`.

Let zipFile = `new ZipFile(fromFile)`.

Let toFile = `File.createTempFile("test", ".zip")`.

Do `toFile.deleteOnExit()`.

## Exercise: identity map

Do `ZipUtils.mapToFile({ println it; it }, zipFile, toFile)`.

## Verify

Assert that `toFile.length()` is not `0L`.

# Test: fold zip file to list of zip entries

## Setup

Let url = `getClass().getResource("/nbmtools/zip1.zip")`.

Let zipFile = `new ZipFile(new File(url.toURI()))`.

Let f = `{ ZipUtils.Entry entry, List list ->
             def zipEntry = entry.zipEntry
             list.add([ zipEntry.name, zipEntry.size, zipEntry.crc ])
             list }`.

Let expected = `[
    [ "dir1/file1.txt", 13L, 3658254147L],
    [ "file2.txt",      13L, 3816930182L],
]`.

## Verify

Assert that `ZipUtils.fold(f, [], zipFile)` is `expected`.

# Test: fold zip stream to list of zip entries

## Setup

Let ins = `getClass().getResourceAsStream("/nbmtools/zip1.zip")`.

Let zis = `new ZipInputStream(ins)`.

Let f = `{ ZipUtils.Entry entry, List list ->
             def zipEntry = entry.zipEntry
             list.add([ zipEntry.name, zipEntry.size, zipEntry.crc ])
             list }`.

Let expected = `[
    [ "dir1/file1.txt", 13L, 3658254147L],
    [ "file2.txt",      13L, 3816930182L],
]`.

## Verify

Assert that `ZipUtils.fold(f, [], zis)` is `expected`.

# Test: copying a zip file creates a new zip file with same contents

## Setup

Let fromFile = `new File(getClass().getResource("/nbmtools/zip1.zip").toURI())`.

Let toFile = `File.createTempFile("ZipUtilsTest-copy-to", ".zip")`.

Let zis = `new ZipInputStream(new FileInputStream(fromFile))`
and zos = `new ZipOutputStream(new FileOutputStream(toFile))`.

Do `toFile.deleteOnExit()`.

## Exercise

Do `ZipUtils.copy(zis, zos)`.  

Do `zis.close(); zos.close()`.

## Verify

Assert that `fromContents` is `toContents` where
    fromContents = `NbmUtils.toZipEntryList(new ZipFile(fromFile))`
and toContents = `NbmUtils.toZipEntryList(new ZipFile(toFile))`.
