*[URI]: java.net.URI
*[IOUtils]: org.apache.commons.io.IOUtils
*[External]: nbmtools.External
*[concatWithColon]: nbmtools.concatWithColon
*[Some]: scala.Some
*[JC]: scala.collection.JavaConversions

# Test: concatWithColon.unapply

Assert that `concatWithColon.unapply("A:B").toString()` is "Some((A,B))".

Assert that `concatWithColon.unapply(":").toString()` is "Some((,))".

Assert that `concatWithColon.unapply("A:").toString()` is "Some((A,))".

Assert that `concatWithColon.unapply(":B").toString()` is "Some((,B))".

Assert that `concatWithColon.unapply("A::B").toString()` is "Some((A,:B))".

Assert that `concatWithColon.unapply("A").toString()` is "None".

# Test: External.from InputStream 1

Assert that `External.from(ins)` is `External.apply(Some.apply(123L), urlList)`
where external = [CRC and one URL]
and ins = `IOUtils.toInputStream(external, "UTF-8")`
and urls = `[new URI("http://example.com/")]`
and urlList = `JC.asScalaBuffer(urls).toList()`.

### CRC and one URL

```
CRC:123
URL:http://example.com/
```

# Test: External.from InputStream 2

Assert that `External.from(ins)` is `External.apply(Some.apply(123L), urlList)`
where external = [CRC and two URLs]
and ins = `IOUtils.toInputStream(external, "UTF-8")`
and urls = `[new URI("http://www1.example.com/"), new URI("http://www2.example.com/")]`
and urlList = `JC.asScalaBuffer(urls).toList()`.

### CRC and two URLs

```
CRC:123
URL:http://www1.example.com/
URL:http://www2.example.com/
```

# Test: openStream succeeds if the URL is valid

Assert that `IOUtils.toString(ext.openStream())` is "content of text1"
where uri = `getClass().getResource("/nbmtools/text1.txt").toURI()`
and urlList = `JC.asScalaBuffer([uri]).toList()`
and ext = `External.apply(Some.apply(0L), urlList)`.

# Test: openStream fails if there are no URLs

Assert that `ext.openStream()` throws an instance of `java.io.IOException`
where urlList = `JC.asScalaBuffer([]).toList()`
and ext = `External.apply(Some.apply(0L), urlList)`.

# Test: openStream fails if the URL is invalid

Assert that `ext.openStream()` throws an instance of `java.io.IOException`
where uri = `new URI("file://nosuchuri")`
and urlList = `JC.asScalaBuffer([uri]).toList()`
and ext = `External.apply(Some.apply(0L), urlList)`.

# Test: openStream succeeds if the second URL is valid

Assert that `IOUtils.toString(ext.openStream())` is "content of text1"
where uri1 = `new URI("file://nosuchuri")`
and uri2 = `getClass().getResource("/nbmtools/text1.txt").toURI()`
and urlList = `JC.asScalaBuffer([uri1, uri2]).toList()`
and ext = `External.apply(Some.apply(0L), urlList)`.
