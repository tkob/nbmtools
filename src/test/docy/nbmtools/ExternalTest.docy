*[URI]: java.net.URI
*[InputStream]: java.io.InputStream
*[IOUtils]: org.apache.commons.io.IOUtils
*[External]: nbmtools.External
*[concatWithColon]: nbmtools.concatWithColon
*[Some]: scala.Some
*[JC]: scala.collection.JavaConversions
*[TestUtils]: nbmtools.TestUtils

# Test: concatWithColon.unapply

Assert that `concatWithColon.unapply("A:B").toString()` is "Some((A,B))".

Assert that `concatWithColon.unapply(":").toString()` is "Some((,))".

Assert that `concatWithColon.unapply("A:").toString()` is "Some((A,))".

Assert that `concatWithColon.unapply(":B").toString()` is "Some((,B))".

Assert that `concatWithColon.unapply("A::B").toString()` is "Some((A,:B))".

Assert that `concatWithColon.unapply("A").toString()` is "None".

# Test: External.from InputStream 1

Assert that `External.from(ins)` is `External.apply(Some.apply(123L), uris)`
where ins = [CRC and one URL] as `InputStream`
and uris = `TestUtils.uris(["http://example.com/"])`.

### CRC and one URL

```
CRC:123
URL:http://example.com/
```

# Test: External.from InputStream 2

Assert that `External.from(ins)` is `External.apply(Some.apply(123L), uris)`
where ins = [CRC and two URLs] as `InputStream`
and uris = `TestUtils.uris(["http://www1.example.com/", "http://www2.example.com/"])`.

### CRC and two URLs

```
CRC:123
URL:http://www1.example.com/
URL:http://www2.example.com/
```

# Test: openStream succeeds if the URL is valid

Assert that `IOUtils.toString(ext.openStream())` is "content of text1"
where url = `getClass().getResource("/nbmtools/text1.txt").toString()`
and ext = `External.apply(Some.apply(0L), TestUtils.uris([url]))`.

# Test: openStream fails if there are no URLs

Assert that `ext.openStream()` throws an instance of `java.io.IOException`
where ext = `External.apply(Some.apply(0L), TestUtils.uris([]))`.

# Test: openStream fails if the URL is invalid

Assert that `ext.openStream()` throws an instance of `java.io.IOException`
where uris = `TestUtils.uris(["file://nosuchuri"])`
and ext = `External.apply(Some.apply(0L), uris)`.

# Test: openStream succeeds if the second URL is valid

Assert that `IOUtils.toString(ext.openStream())` is "content of text1"
where url1 = "file://nosuchuri"
and url2 = `getClass().getResource("/nbmtools/text1.txt").toString()`
and ext = `External.apply(Some.apply(0L), TestUtils.uris([url1, url2]))`.
